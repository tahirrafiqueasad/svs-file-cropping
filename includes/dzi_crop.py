""" 
Author:		 Muhammad Tahir Rafique
Date:		 2021-08-26 14:00:27
Description: Provide function that deal with dz tiles generated by "vips dzsave" library.
"""
import os
import numpy as np
import cv2

from includes.dzi_info import read_dzi_file_info


def _get_grid_location_from_coordinate(dzi_info_dict, coordinate):
    """Getting grid location."""
    x = coordinate[0]
    y = coordinate[1]
    x_loc = int(x / dzi_info_dict['TileSize'])
    y_loc = int(y / dzi_info_dict['TileSize'])
    return x_loc, y_loc

def _get_coordinate_from_grid_location(dzi_info_dict, grid_location):
    x_loc = grid_location[0]
    y_loc = grid_location[1]
    tile_size = dzi_info_dict['TileSize']
    xmin = x_loc * tile_size
    ymin = y_loc * tile_size
    xmax = xmin + tile_size
    ymax = ymin + tile_size

    # CORRECTING COORDINATES
    img_xmin = 0
    img_ymin = 0
    img_xmax = dzi_info_dict['Width']
    img_ymax = dzi_info_dict['Height']
    if xmin < img_xmin:
        xmin = img_xmin
    if ymin < img_xmin:
        ymin = img_ymin
    if xmax > img_xmax:
        xmax = img_xmax
    if ymax > img_ymax:
        ymax = img_ymax

    coordinate = [xmin, ymin, xmax, ymax]
    return coordinate


def _generate_image_from_tile_grid(dzi_info_dict, grid_location, tiles_dir):
    """Getting image from grid."""
    xmin_grid = grid_location[0]
    ymin_grid = grid_location[1]
    xmax_grid = grid_location[2]
    ymax_grid = grid_location[3]

    h = dzi_info_dict['Height']
    w = dzi_info_dict['Width']
    t = dzi_info_dict['TileSize']
    max_w_loc = int(w / t)
    max_h_loc = int(h / t)

    # EXCEPTION HANDLING
    assert xmin_grid >= 0, 'xmin_grid is negative'
    assert ymin_grid >= 0, 'ymin_grid is negative'
    assert xmax_grid <= max_w_loc, 'xmax_grid out of index'
    assert ymax_grid <= max_h_loc, 'xmax_grid out of index'
    assert xmax_grid >= xmin_grid, 'xmax_grid is less then xmin_grid'
    assert ymax_grid >= ymin_grid, 'ymax_grid is less then ymin_grid'

    image = np.zeros((((ymax_grid - ymin_grid) + 1) * t, ((xmax_grid - xmin_grid) + 1) * t, 3), dtype=np.uint8)

    for i in range(ymin_grid - ymin_grid, (ymax_grid - ymin_grid) + 1):
        for j in range(xmin_grid - xmin_grid, (xmax_grid - xmin_grid) + 1):
            tile = cv2.imread(os.path.join(tiles_dir, '{}_{}.jpeg'.format(j + xmin_grid, i + ymin_grid)))
            th, tw, _ = tile.shape
            image[i*t:i*t + th, j*t:j*t + tw, :] = tile
    return image


def _get_image_crop(image_array, xc, yc, w, h):
    """Getting image crop."""
    # FINDING COORDINATES
    xmin = xc - (w // 2)
    ymin = yc - (h // 2)
    xmax = xc + (w // 2)
    ymax = yc + (h // 2)
    img_h, img_w, img_d = image_array.shape
    img_xmin = 0
    img_ymin = 0
    img_xmax = img_w
    img_ymax = img_h
    ofs_xmin = 0
    ofs_ymin = 0
    ofs_xmax = 0
    ofs_ymax = 0

    # CORRECTING COORDINATE
    if xmin < img_xmin:
        ofs_xmin = img_xmin - xmin
        xmin = img_xmin
    if ymin < img_xmin:
        ofs_ymin = img_ymin - ymin
        ymin = img_ymin
    if xmax > img_xmax:
        ofs_xmax = img_xmax - xmax
        xmax = img_xmax
    if ymax > img_ymax:
        ofs_ymax = img_ymax - ymax
        ymax = img_ymax
    
    # EXTRACTING CROP
    crop = np.zeros((h, w, img_d), dtype=np.uint8)
    img_crop = image_array[ymin:ymax, xmin:xmax, :]
    crop[ofs_ymin:ofs_ymax+h, ofs_xmin:ofs_xmax+w, :] = img_crop
    return crop


def _get_crop_from_dz(dzi_info_dict, coordinate, tiles_dir, image_height, image_width):
    """Obtaining crop from dzi files."""
    # FINDING CORRECT COORDINATES
    xc = coordinate[0]
    yc = coordinate[1]
    xmin = xc - (image_width // 2)
    ymin = yc - (image_height // 2)
    xmax = xc + (image_width // 2)
    ymax = yc + (image_height // 2)
    img_xmin = 0
    img_ymin = 0
    img_xmax = dzi_info_dict['Width']
    img_ymax = dzi_info_dict['Height']
    if xmin < img_xmin:
        xmin = img_xmin
    if ymin < img_xmin:
        ymin = img_ymin
    if xmax > img_xmax:
        xmax = img_xmax
    if ymax > img_ymax:
        ymax = img_ymax

    # OBTAINING LOCATION COORDINATE
    xmin_loc, ymin_loc = _get_grid_location_from_coordinate(dzi_info_dict, [xmin, ymin])
    xmax_loc, ymax_loc = _get_grid_location_from_coordinate(dzi_info_dict, [xmax, ymax])

    # FINDING RELATIVE CENTER COORDINATE
    tl_grid = _get_coordinate_from_grid_location(dzi_info_dict, [xmin_loc, ymin_loc])
    relative_xc = xc - tl_grid[0]
    relative_yc = yc - tl_grid[1]

    # OBTAINING IMAGE AND CROP
    image = _generate_image_from_tile_grid(dzi_info_dict, [xmin_loc, ymin_loc, xmax_loc, ymax_loc], tiles_dir)
    crop = _get_image_crop(image, relative_xc, relative_yc, image_width, image_height)
    return crop


def _correct_coordinates(bounding_box):
    """Converting [xmin, ymin, xmax, ymax] to [xc, yc, width, height]"""
    width = bounding_box[2] - bounding_box[0]
    height = bounding_box[3] - bounding_box[1]
    xc = bounding_box[0] + (width // 2)
    yc = bounding_box[1] + (height // 2)
    crop_coordinate = [xc, yc, width, height]
    return crop_coordinate


# ===============================================
#       Obtained crops from dzi files
# ===============================================
def get_crop_from_dz(dzi_file_dir, dzi_info_path, bounding_boxes):
    # 1. CORRECTING COORDINATES
    crop_coordinate = _correct_coordinates(bounding_boxes)

    # 2. GETING TILE LOCATION
    avilable_dir = os.listdir(dzi_file_dir)
    tiles_dir = [int(x) for x in avilable_dir]
    tiles_dir = os.path.join(dzi_file_dir, str(max(tiles_dir)))

    # 3. READING XML FILE INFORMATION
    dzi_info_dict = read_dzi_file_info(dzi_info_path)

    # 4. EXCEPTION FOR NON NERO OVERLAP
    assert dzi_info_dict['Overlap'] == 0, 'dzi must be created with overlap == 0'

    # 5. MAKING CROPS
    crop = _get_crop_from_dz(dzi_info_dict, (crop_coordinate[0], crop_coordinate[1]), tiles_dir, crop_coordinate[3], crop_coordinate[2])

    return crop